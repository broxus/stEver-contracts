pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./interfaces/IDepoolStrategyFactory.tsol";
import "./interfaces/IStEverCluster.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./StrategyDePool.tsol";
import "./interfaces/IStrategy.tsol";
import "./utils/Constants.tsol";
import "./utils/ErrorCodes.tsol";
import "./utils/Gas.tsol";


/**
 * @title DepoolStrategyFactory
 *
 * @dev Implementation of the {IDepoolStrategyFactory} interface.
 *
 * This contract is responsible for creating and managing DePool strategies.
 * It also handles the upgrade of strategies and the transfer of ownership.
 */

contract DepoolStrategyFactory is IDepoolStrategyFactory {
    // static variables
    uint128 public static nonce;
    TvmCell public static dePoolStrategyCode;
    address public static stEverVault;

    // state variables
    address owner;
    uint32 public strategyVersion;
    uint32 public strategyCount;
    uint32 public factoryVersion;

    // error codes
    uint16 constant NOT_OWNER = 5001;
    uint16 constant LOW_MSG_VALUE = 5002;
    uint16 constant WRONG_PUBKEY = 5003;

    /**
     * @dev Sets the initial owner of the contract.
     * @param _owner The address of the initial owner.
     *
     * **Preconditions**:
     *
     * - The contract must be deployed with a non-zero public key.
     * - The contract must be deployed with the same public key as the message.
     */
    constructor(address _owner) public {

        require (tvm.pubkey() != 0, WRONG_PUBKEY);
        require (tvm.pubkey() == msg.pubkey(), WRONG_PUBKEY);

        tvm.accept();

        owner = _owner;
    }

    /**
     * @dev Modifier to make a function callable only when the caller is the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner,NOT_OWNER);
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the call value is above a certain threshold.
     */
    modifier minCallValue() {
        require (msg.value >= DePoolStrategyFactoryGas.MIN_CALL_VALUE, ErrorCodes.NOT_ENOUGH_VALUE_FACTORY);
        _;
    }

    /**
    * @dev Calculates the reserve by taking the maximum of the contract's
    * current balance minus the value sent in the message
    * (i.e., the amount of native coins sent with the current transaction) and the
    * minimum balance of the contract (as determined by the {DePoolStrategyFactoryGas.CONTRACT_MIN_BALANCE} constant).
    *
    * This ensures that the reserve is set to the higher of the contract's
    * current balance minus the message value or its minimum balance, ensuring that the contract
    * does not spend more native coins than it has available.
    *
    * @return The calculated reserve.
    */
    function _reserve() internal pure returns (uint128) {
		return
			math.max(address(this).balance - msg.value, DePoolStrategyFactoryGas.CONTRACT_MIN_BALANCE);
	}

    /**
     * @dev See {IDepoolStrategyFactory-getDetails}.
     */
    function getDetails() override external responsible view returns (FactoryDetails) {
        return {value:0, bounce: false, flag: MsgFlag.REMAINING_GAS} FactoryDetails({
            stEverVault: stEverVault,
            owner: owner,
            strategyVersion: strategyVersion,
            strategyCount: strategyCount,
            factoryVersion: factoryVersion
        });
    }
    /**
     * @dev See {IDepoolStrategyFactory-transferOwnership}.
     *
     * **Preconditions**:
     *
     *  - Only the owner can call this function.
     *
     * Postcondition:
     *  - The owner is set to `_newOwner`.
     */
    function transferOwnership(address _newOwner, address _sendGasTo) override external onlyOwner {
        tvm.rawReserve(_reserve(), 0);

        owner = _newOwner;

        _sendGasTo.transfer({value: 0, flag:MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /**
     * @dev See {IDepoolStrategyFactory-installNewStrategyCode}.
     *
     * **Preconditions**:
     *
     *  - The call value must be greater than or equal to {DePoolStrategyFactoryGas.UPGRADE_VALUE}.
     *  - Only the owner can call this function.
     *
     * Postcondition:
     *  - The strategy code is set to `_strategyCode`.
     */
    function installNewStrategyCode(TvmCell _strategyCode, address _sendGasTo) override external onlyOwner {
        require (msg.value >= DePoolStrategyFactoryGas.UPGRADE_VALUE, LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(),0);

        dePoolStrategyCode = _strategyCode;
        strategyVersion++;
        emit StrategyCodeUpdated(strategyVersion - 1,strategyVersion);

        _sendGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /**
     * @dev See {IDepoolStrategyFactory-deployStrategy}.
     *
     * **Preconditions**:
     *
     *  - The call value must be greater than or equal to
     *    {DePoolStrategyFactoryGas.STRATEGY_DEPLOY_VALUE} + {DePoolStrategyFactoryGas.MIN_CALL_VALUE}.
     *  - Only the owner can call this function.
     *
     * Postcondition:
     *  - A new strategy is deployed.
     *  - The strategy count is incremented.
     *  - The strategy is initialized.
     *  - Calls `onStrategyDeployed` on the StEverCluster contract, registering the strategy.
     *
     */
    function deployStrategy(address _dePool) override external {
        require (msg.value >= DePoolStrategyFactoryGas.STRATEGY_DEPLOY_VALUE + DePoolStrategyFactoryGas.MIN_CALL_VALUE, LOW_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        TvmCell stateInit = tvm.buildStateInit({
            contr: StrategyDePool,
            varInit: {
                nonce: strategyCount,
                factory: address(this),
                strategyVersion: strategyVersion
            },
            pubkey: tvm.pubkey(),
            code: dePoolStrategyCode
        });

        strategyCount++;
        address strategy = new StrategyDePool{
            stateInit: stateInit,
            value: DePoolStrategyFactoryGas.STRATEGY_DEPLOY_VALUE,
            wid: address(this).wid
        }(stEverVault, _dePool);

        emit NewStrategyDeployed(strategy,_dePool, strategyVersion);

        IStEverCluster(msg.sender).onStrategyDeployed{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(strategy);
    }

    /**
     * @dev See {IDepoolStrategyFactory-upgradeStrategies}.
     *
     * **Preconditions**:
     *
     *  - Only the owner can call this function.
     *  - The number of strategies to upgrade must be less than or equal to Constants.MAX_STRATEGY_PER_UPGRADE.
     *  - The call value must be greater than or equal to
     *    DePoolStrategyFactoryGas.MIN_CALL_VALUE * _strategies.length + DePoolStrategyFactoryGas.MIN_CALL_VALUE.
     *
     * Postcondition:
     * - Calls `upgrade` on each strategy in `_strategies`.
     */
    function upgradeStrategies(address[] _strategies) override external onlyOwner {
        require (_strategies.length <= Constants.MAX_STRATEGY_PER_UPGRADE, ErrorCodes.MAX_STRATEGY_THAN_ALLOWED);
        require (
            msg.value >= DePoolStrategyFactoryGas.MIN_CALL_VALUE * _strategies.length + DePoolStrategyFactoryGas.MIN_CALL_VALUE,
            ErrorCodes.NOT_ENOUGH_VALUE_FACTORY
        );

        tvm.rawReserve(_reserve(),0);

        for (address strategy : _strategies) {
            IStrategy(strategy).upgrade{
                    value: DePoolStrategyFactoryGas.MIN_CALL_VALUE,
                    bounce: false
            }(dePoolStrategyCode, strategyVersion, msg.sender);
        }

        msg.sender.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    /**
     * @dev See {IDepoolStrategyFactory-upgrade}.
     *
     * Precondition:
     *  - Should be called only by the owner.
     *
     * Postcondition:
     * - Factory code is changed to `_newCode`.
     */
    function upgrade(TvmCell _newCode, uint32 _newVersion, address _sendGasTo) override external onlyOwner {
        if (_newVersion == factoryVersion) {
            tvm.rawReserve(_reserve(), 0);
            _sendGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce:false});
            return;
        }

        // should be unpacked in the same order!
        TvmCell data = abi.encode(
            _sendGasTo, // address
            _newVersion, // uint32
            dePoolStrategyCode, // TvmCell
            stEverVault, // address
            owner, // address
            strategyVersion, // uint32
            strategyCount, // uint32
            factoryVersion // uint32
        );

        // set code after complete this method
        tvm.setcode(_newCode);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(_newCode);

        onCodeUpgrade(data);
    }

    /**
     * @dev Handles the code upgrade.
     * @param _upgradeData The data of the upgrade.
     */
    function onCodeUpgrade(TvmCell _upgradeData) private {}

}
