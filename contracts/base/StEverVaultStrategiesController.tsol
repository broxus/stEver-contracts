pragma ever-solidity >=0.62.0;

import "./StEverVaultBase.tsol";
import "./StEverVaultEmergency.tsol";
import "./StEverStrategiesManager.tsol";

import "../interfaces/IStrategy.tsol";




abstract contract StEverVaultStrategiesController is StEverVaultBase, StEverVaultEmergency, StEverStrategiesManager  {
    function depositToStrategies(mapping (address => DepositConfig) _depositConfigs) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;

        for (uint256 i = 0; i < chunkSize && !_depositConfigs.empty(); i++) {

            (address strategy, DepositConfig depositConfig) = _depositConfigs.delMin().get();

            // calculate required amount to send
            uint128 valueToSend = depositConfig.amount + depositConfig.fee;
            if (!canTransferValue(valueToSend)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_DEPOSIT);
                continue;
            }

            if (!strategies.exists(strategy)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (depositConfig.amount < minStrategyDepositValue) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.BAD_DEPOSIT_TO_STRATEGY_VALUE);
                continue;
            }

            if (totalAssets < depositConfig.fee) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            if (!isStrategyInInitialState(strategy, false)) {
                emit ProcessDepositToStrategyError(strategy, ErrorCodes.STRATEGY_NOT_IN_INITIAL_STATE);
                continue;
            }


            // change depositing strategy state
            strategies[strategy].depositingAmount = depositConfig.amount;

            // reduce availableAssets
            availableAssets -= valueToSend;

            // grab fee from total assets, then add it back after receiving response from strategy
            totalAssets -= depositConfig.fee;

            IStrategy(strategy).deposit{value: depositConfig.amount + depositConfig.fee, bounce: false}(uint64(depositConfig.amount));
        }
        if (!_depositConfigs.empty()) {
            this.depositToStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce: false}(_depositConfigs);
        }
    }

    function onStrategyHandledDeposit() override external onlyStrategy {
        uint128 depositingAmount = strategies[msg.sender].depositingAmount;
        // set init state for depositing
        strategies[msg.sender].depositingAmount = 0;

        // calculate remaining gas
        uint128 returnedFee = (msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE);
        updateTotalAssetsForStrategy(msg.sender, depositingAmount, true);
        // add fee back
        availableAssets += returnedFee;
        totalAssets += returnedFee;
        emit StrategyHandledDeposit(msg.sender, depositingAmount);
    }

    function onStrategyDidntHandleDeposit(uint32 _errcode) override external onlyStrategy {
        uint128 depositingAmount = strategies[msg.sender].depositingAmount;
        // set init state for depositing
        strategies[msg.sender].depositingAmount = 0;

        availableAssets += msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        // add fee back to total assets
        if (depositingAmount > msg.value) {
            // if depositing amount gt msg.value therefore we spent more than attached fee
            totalAssets -= depositingAmount - msg.value + StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
        }
        if (msg.value > depositingAmount) {
            totalAssets += msg.value - depositingAmount - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
        }
        emit StrategyDidntHandleDeposit(msg.sender, _errcode);
    }

    function strategyReport(uint128 _gain, uint128 _loss, uint128 _totalAssets, uint128 _requestedBalance) override external onlyStrategy {

        strategies[msg.sender].lastReport = now;
        strategies[msg.sender].totalGain += _gain;
        strategies[msg.sender].totalAssets = _totalAssets >= Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION ?
        _totalAssets - Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION :
        0;

        uint128 stEverFee = math.muldiv(_gain, stEverFeePercent, Constants.ONE_HUNDRED_PERCENT);
        totalStEverFee += stEverFee;
        uint128 gainWithoutStEverFee = _gain - stEverFee;


        // if gain less than the fee, therefore, we shouldn't increase total assets
        uint128 gainWithoutGainFee = gainWithoutStEverFee > gainFee ?
        gainWithoutStEverFee - gainFee :
        0;
        totalAssets += gainWithoutGainFee;
        emit StrategyReported(msg.sender, StrategyReport(gainWithoutGainFee, _loss, _totalAssets));


        uint128 sendValueToStrategy;
        if (_requestedBalance > 0 && canTransferValue(_requestedBalance)) {
            totalAssets -= _requestedBalance;
            availableAssets -= _requestedBalance;
            sendValueToStrategy = _requestedBalance;
        }
        tvm.rawReserve(_reserveWithValue(sendValueToStrategy), 0);
        msg.sender.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

    function processWithdrawFromStrategies(mapping (address => WithdrawConfig) _withdrawConfig) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;

        for (uint256 i = 0; i < chunkSize && !_withdrawConfig.empty(); i++) {
            (address strategy, WithdrawConfig config) = _withdrawConfig.delMin().get();

            if (config.amount < minStrategyWithdrawValue) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.BAD_WITHDRAW_FROM_STRATEGY_VALUE);
                continue;
            }

            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (!canTransferValue(config.fee)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_WITHDRAW);
                continue;
            }

            if (!isStrategyInInitialState(strategy, true)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_IN_INITIAL_STATE);
                continue;
            }

            if (totalAssets < config.fee) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            // grab fee, then add it back after receiving response from strategy
            availableAssets -= config.fee;

            totalAssets -= config.fee;

            // change withdrawing strategy state
            strategies[strategy].withdrawingAmount = config.amount;

            IStrategy(strategy).withdraw{value:config.fee, bounce: false}(uint64(config.amount));
        }
        if (!_withdrawConfig.empty()) {
            this.processWithdrawFromStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce:false}(_withdrawConfig);
        }
    }

    function onStrategyHandledWithdrawRequest() override external onlyStrategy {

        emit StrategyHandledWithdrawRequest(msg.sender, strategies[msg.sender].withdrawingAmount);

        if (isEmergencyProcess()) {
            tvm.rawReserve(_reserve(), 0);

            emergencyState.emitter.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }
        // set back remaining gas after withdraw request
        availableAssets += msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
        totalAssets += msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
    }

    /*
        Method for situation when dePool is stopped emit new rounds, and our deposit there is in the Pooling round
    */
    function forceWithdrawFromStrategies(mapping (address => WithdrawConfig) _withdrawConfig) override external onlyGovernanceOrSelfAndAccept {
        uint256 chunkSize = 50;

        for (uint256 i = 0; i < chunkSize && !_withdrawConfig.empty(); i++) {
            (address strategy, WithdrawConfig config) = _withdrawConfig.delMin().get();

            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (!canTransferValue(config.fee)) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE_TO_WITHDRAW);
                continue;
            }

            if (totalAssets < config.fee) {
                emit ProcessWithdrawFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_TOTAL_ASSETS);
                continue;
            }

            // grab fee, then add it back after receiving response from strategy
            availableAssets -= config.fee;

            totalAssets -= config.fee;

            // change withdrawing strategy state
            strategies[strategy].withdrawingAmount = config.amount;

            IStrategy(strategy).withdrawForce{value:config.fee, bounce: false}(uint64(config.amount));
        }
        if (!_withdrawConfig.empty()) {
            this.forceWithdrawFromStrategies{value: StEverVaultGas.SEND_SELF_VALUE, bounce:false}(_withdrawConfig);
        }
    }

    function receiveFromStrategy() override external onlyStrategy {
        // set init state for withdrawing
        strategies[msg.sender].withdrawingAmount = 0;

        uint128 receivedAmount = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;
        updateTotalAssetsForStrategy(msg.sender, msg.value, false);
        availableAssets += receivedAmount;

        emit StrategyWithdrawSuccess(msg.sender, receivedAmount);

        if (isStrategyReadyToDelete(msg.sender)) {
            removeStrategy(msg.sender);
        }
    }

    function receiveAdditionalTransferFromStrategy() override external onlyStrategy {
        uint128 receivedAmount = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        availableAssets += receivedAmount;
        updateTotalAssetsForStrategy(msg.sender, msg.value, false);

        if (isStrategyReadyToDelete(msg.sender)) {
            removeStrategy(msg.sender);
        }

        emit ReceiveAdditionalTransferFromStrategy(msg.sender, receivedAmount);
    }

    function isStrategyReadyToDelete(address _strategy) internal view returns(bool) {
        StrategyParams strategy = strategies[_strategy];
        return strategy.state == StrategyState.REMOVING && strategy.totalAssets == 0;
    }

    function updateTotalAssetsForStrategy(address _strategy, uint128 _amount, bool _isIncrease) internal {

        if (_isIncrease) {
            uint128 correctedAmount = _amount >= Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION ?
            _amount - Constants.INCREASE_STRATEGY_TOTAL_ASSETS_CORRECTION :
            0;

            strategies[_strategy].totalAssets += correctedAmount;
            return;
        }

        uint128 currentStrategyAssets = strategies[_strategy].totalAssets;

        if (_amount >= currentStrategyAssets) {
            strategies[_strategy].totalAssets = 0;
            return;
        }

        strategies[_strategy].totalAssets -= _amount;

    }

    function withdrawFromStrategyError(uint32 _errcode) override external onlyStrategy {
        emit StrategyWithdrawError(msg.sender, _errcode);
        // set init state for withdrawing
        strategies[msg.sender].withdrawingAmount = 0;

        if (isEmergencyProcess()) {
            tvm.rawReserve(_reserve(), 0);

            emergencyState.emitter.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }
        // calculate remaining gas
        uint128 notUsedFee = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        // set remaining gas
        availableAssets += notUsedFee;
        totalAssets += notUsedFee;
    }

    // extra money from strategies
    function processWithdrawExtraMoneyFromStrategies(address[] _strategies) override external onlyGovernanceOrSelfAndAccept {

        for (address strategy : _strategies) {
            if (!strategies.exists(strategy)) {
                emit ProcessWithdrawExtraMoneyFromStrategyError(strategy, ErrorCodes.STRATEGY_NOT_EXISTS);
                continue;
            }

            if (!canTransferValue(Constants.MIN_TRANSACTION_VALUE)) {
                emit ProcessWithdrawExtraMoneyFromStrategyError(strategy, ErrorCodes.NOT_ENOUGH_VALUE);
                continue;
            }

            availableAssets -= Constants.MIN_TRANSACTION_VALUE;

            IStrategy(strategy).withdrawExtraMoney{value: Constants.MIN_TRANSACTION_VALUE, bounce: false}();
        }
    }

    function receiveExtraMoneyFromStrategy() override external onlyStrategy {
        uint128 receivedValue = msg.value - StEverVaultGas.HANDLING_STRATEGY_CB_FEE;

        availableAssets += receivedValue;

        uint128 availableAssetsIncreasedFor = receivedValue > Constants.MIN_TRANSACTION_VALUE ?
        receivedValue - Constants.MIN_TRANSACTION_VALUE : 0;

        emit ReceiveExtraMoneyFromStrategy(msg.sender, availableAssetsIncreasedFor);
    }



}
