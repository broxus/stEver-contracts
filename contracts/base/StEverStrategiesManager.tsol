pragma ever-solidity >=0.62.0;
import "./StEverVaultBase.tsol";
import "../interfaces/IStEverCluster.tsol";
import "../utils/ClusterLib.tsol";



abstract contract StEverStrategiesManager is StEverVaultBase {


    function createCluster(
        address _clusterOwner,
        uint128 _assurance,
        uint32 _maxStrategiesCount
    ) override external onlyOwner {
        require(msg.value >= StEverVaultGas.DEPLOY_CLUSTER_VALUE + StEverVaultGas.MIN_CALL_MSG_VALUE);
        tvm.rawReserve(_reserve(), 0);

        if (!clusterPools.exists(_clusterOwner)) {
            mapping(uint32 => bool) emptyClusters;
            clusterPools[_clusterOwner] = ClustersPool({
                currentClusterNonce: 0,
                clusters: emptyClusters
            });
        } else {
            clusterPools[_clusterOwner].currentClusterNonce++;
        }

        address cluster = deployCluster(
            _clusterOwner,
            clusterPools[_clusterOwner].currentClusterNonce,
            _assurance,
            _maxStrategiesCount
        );
        emit ClusterCreated(_clusterOwner, _assurance, _maxStrategiesCount, cluster);
        owner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }
    function addStrategies(address[] _strategies, address _clusterOwner, uint32 _clusterId) override external onlyCluster(_clusterOwner, _clusterId)  {
        require (msg.value >= _strategies.length * StEverVaultGas.EXPERIMENTAL_FEE, ErrorCodes.NOT_ENOUGH_VALUE);

        uint8 batchSize = 50;

        require (_strategies.length <= batchSize, ErrorCodes.MAX_BATCH_SIZE_REACHED);


        for (address strategy : _strategies) {
            require (!strategies.exists(strategy), ErrorCodes.STRATEGY_ALREADY_EXISTS);

            strategies[strategy] = StrategyParams({
                    lastReport: 0,
                    totalGain: 0,
                    depositingAmount: 0,
                    withdrawingAmount: 0,
                    totalAssets: 0,
                    cluster: msg.sender,
                    state: StrategyState.ACTIVE
            });
        }

        tvm.rawReserve(_reserve(), 0);

        emit StrategiesAdded(_strategies);

        IStEverCluster(msg.sender).onStrategiesAdded{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_strategies);
    }

    function removeStrategies(
        address[] _strategies,
        address _clusterOwner,
        uint32 _clusterId
    ) override external onlyCluster(_clusterOwner, _clusterId) {

        address[] pendingDeleteStrategies;
        for (address _strategy : _strategies) {
            strategies[_strategy].state = StrategyState.REMOVING;

            if (strategies[_strategy].totalAssets == 0) {
                removeStrategy(_strategy);
                continue;
            }

            pendingDeleteStrategies.push(_strategy);
        }

        if (pendingDeleteStrategies.length == 0) {
            tvm.rawReserve(_reserve(), 0);
            _clusterOwner.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }

        uint128 minimalRemoveStrategyValue = uint128(pendingDeleteStrategies.length) * StEverVaultGas.REMOVE_STRATEGY_RESERVE;

        tvm.rawReserve(address(this).balance - (msg.value - minimalRemoveStrategyValue), 0);
        emit StrategiesPendingRemove(pendingDeleteStrategies);

        IStEverCluster(msg.sender).onPendingStrategyRemove{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(pendingDeleteStrategies);
    }

    function removeStrategy(address _strategy) internal {
        this._removeStrategy{
            value: StEverVaultGas.REMOVE_STRATEGY_RESERVE,
            bounce: false
        }(_strategy);
    }
    function _removeStrategy(address _strategy) external override onlySelf {
        tvm.rawReserve(_reserve(), 0);

        StrategyParams strategy = strategies[_strategy];
        delete strategies[_strategy];
        emit StrategyRemoved(_strategy);

        IStEverCluster(strategy.cluster).onStrategyRemoved{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_strategy);
    }

}
