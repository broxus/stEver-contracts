pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
import "./interfaces/IStrategy.tsol";
import "./interfaces/IDePoolStrategy.tsol";
import "./interfaces/IParticipant.tsol";
import "./interfaces/IDePool.tsol";
import "./interfaces/IStEverVault.tsol";
import "./utils/ErrorCodes.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

/**
 * @title StrategyDePool
 *
 * @dev Implementation of the {IStrategy}, {IDePoolStrategy}, and {IParticipant} interfaces.
 *
 * This contract represents a connector to the DePool contract and is part of the StEver staking platform.
 * It provides functionalities required for interacting with the DePool
 * and is deployed by the {DepoolStrategyFactory} contract.
 */
contract StrategyDePool is IStrategy, IDePoolStrategy, IParticipant {
    // constant
    uint128 constant CONTRACT_MIN_BALANCE = 1 ever;
    uint128 constant THRESHOLD_BALANCE = 4 ever;
    uint128 constant MAX_BALANCE = 10 ever;
    uint64 constant DEPOSIT_STAKE_DEPOOL_FEE = 0.5 ever;
    uint64 constant DEPOSIT_STAKE_STRATEGY_FEE = 0.05 ever;

    // strategy statuses
    uint8 constant STAKE_TO_SMALL = 28;
    uint8 constant DEPOSIT_FEE_TO_SMALL = 29;
    uint8 constant STRATEGY_NOT_IN_INITIAL_STATE = 30;

    uint128 minStake = 1 ever;

    address vault;
    address dePool;

    // states for understanding dePool responses
    State state = State.INITIAL;

    // static
    uint128 public static nonce;
    address public static factory;
    uint32 public static strategyVersion;
    constructor(address _vault,address _dePool) public onlyFactory {
        vault = _vault;
        dePool = _dePool;
    }

    /**
     * @dev Modifier to check if the caller is the vault.
     * Throws an error if the caller is not the vault.
     *
     * **Preconditions**:
     *
     *  - The caller must be the vault.
     */
    modifier onlyVault() {
        require (msg.sender == vault,ErrorCodes.NOT_VAULT);
        _;
    }

    /**
     * @dev Modifier to check if the caller is the dePool.
     * Throws an error if the caller is not the dePool.
     *
     * **Preconditions**:
     *
     *  - The caller must be the dePool.
     */
    modifier onlyDepool() {
        require (msg.sender == dePool, ErrorCodes.NOT_DEPOOL);
        _;
    }

    /**
     * @dev Modifier to check if the caller is the factory.
     * Throws an error if the caller is not the factory.
     *
     * **Preconditions**:
     *
     *  - The caller must be the factory.
     */
    modifier onlyFactory() {
        require (msg.sender == factory, ErrorCodes.NOT_FABRIC);
        _;
    }

    /**
     * @dev Modifier to check if the caller is the dePool or the vault.
     * Throws an error if the caller is not the dePool or the vault.
     *
     * **Preconditions**:
     *
     *  - The caller must be the dePool or the vault.
     */
    modifier onlyDepoolOrVault() {
        require (msg.sender == dePool || msg.sender == vault, ErrorCodes.NOT_DEPOOL_OR_VAULT);
        _;
    }

    /**
     * @dev Returns the maximum of the contract balance minus the message value and the minimum contract balance.
     * @return The maximum of the contract balance minus the message value and the minimum contract balance.
     */
    function _reserve() internal pure returns (uint128) {
		return
			math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
	}


    /**
     * @dev See {IDePoolStrategy-getDetails}.
     */
    function getDetails() override external responsible view returns(Details){
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} Details(vault, dePool, strategyVersion, state);
    }

    /**
     * @dev See {IStrategy-deposit}.
     *
     * **Preconditions**:
     *
     *  - The caller must be the vault.
     *  - The state must be initial.
     *  - The message value must be greater than or equal to the amount plus the deposit stake dePool fee and the deposit stake strategy fee.
     *  - The amount must be greater than or equal to the minimum stake.
     *
     * **Postconditions**:
     *
     *  - The state is set to depositing.
     *  - The depositToDePool function is called with the amount.
     */
    function deposit(uint128 _amount) override external onlyVault {
        tvm.rawReserve(_reserve(), 0);
        if(state != State.INITIAL) {
            return depositNotHandled(STRATEGY_NOT_IN_INITIAL_STATE);
        }
        state = State.DEPOSITING;

        if (msg.value < _amount + DEPOSIT_STAKE_DEPOOL_FEE + DEPOSIT_STAKE_STRATEGY_FEE) {
           return depositNotHandled(DEPOSIT_FEE_TO_SMALL);
        }
        if (_amount < minStake) {
           return depositNotHandled(STAKE_TO_SMALL);
        }
        depositToDePool(_amount);
    }

    /**
     * @dev See {IStrategy-withdraw}.
     *
     * **Preconditions**:
     *
     *  - The caller must be the vault.
     *  - The state must be initial.
     *
     * **Postconditions**:
     *
     *  - The state is set to withdrawing.
     *  - The withdrawFromDePool function is called with the amount.
     */
    function withdraw(uint128 _amount) override external onlyVault {
        tvm.rawReserve(_reserve(),0);
        if(state != State.INITIAL) {
            return withdrawError(STRATEGY_NOT_IN_INITIAL_STATE);
        }
        state = State.WITHDRAWING;

        withdrawFromDePool(_amount);
    }

    /**
     * @dev Deposits a certain amount to the DePool.
     * @param _amount The amount to deposit into the dePool.
     */
    function depositToDePool(uint128 _amount) internal view {
        IDePool(dePool).addOrdinaryStake{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: true}(uint64(_amount));
    }

    /**
     * @dev Withdraws a certain amount from the dePool.
     * @param _amount The amount to withdraw from the dePool.
     */
    function withdrawFromDePool(uint128 _amount) internal view {
        IDePool(dePool).withdrawPart{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: true}(uint64(_amount));
    }

    /**
     * @dev Receives an answer from the dePool.
     * This function checks if the error code is 0 and if the state is depositing or withdrawing.
     * If the error code is 0 and the state is depositing, the state is set to initial and the depositHandled function is called.
     * If the error code is 0 and the state is withdrawing, the onStrategyHandledWithdrawRequest function is called.
     * If the error code is not 0 and the state is depositing, the state is set to initial and the depositNotHandled function is called with the error code.
     * If the error code is not 0 and the state is not depositing, the state is set to initial and the withdrawError function is called with the error code.
     * @param _errcode The error code received from the dePool.
     *
     * **Preconditions**:
     *
     *  - The caller must be the dePool.
     *
     * **Postconditions**:
     *
     *  - The state is set to initial.
     *  - The depositHandled, onStrategyHandledWithdrawRequest, depositNotHandled, or withdrawError function is called depending on the error code and the state.
     */
    function receiveAnswer(uint32 _errcode, uint64) override external onlyDepool {
        tvm.rawReserve(_reserve(),0);

        if (_errcode == 0) {

            if (state == State.DEPOSITING) {
                state = State.INITIAL;
                return depositHandled();
            }

            if (state == State.WITHDRAWING) {
                IStEverVault(vault).onStrategyHandledWithdrawRequest{value: 0, flag:MsgFlag.ALL_NOT_RESERVED, bounce: false}();
            }
            return;
        }

        //  if dePool respond with errors, set state as INITIAL
        if (state == State.DEPOSITING) {

            state = State.INITIAL;
            return depositNotHandled(_errcode);
        }

        state = State.INITIAL;
        return withdrawError(_errcode);

    }

    /**
     * @dev Handles a successful deposit.
     * This function calls the onStrategyHandledDeposit function of the vault.
     *
     * **Postconditions**:
     *
     *  - The onStrategyHandledDeposit function of the vault is called.
     */
    function depositHandled() internal view {
        IStEverVault(vault).onStrategyHandledDeposit{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}();
    }

    /**
     * @dev Handles a unsuccessful deposit.
     * @param _errcode The error code.
     *
     * **Postconditions**:
     *
     *  - The onStrategyDidntHandleDeposit function of the vault is called with the error code.
     */
    function depositNotHandled(uint32 _errcode) internal view {
        IStEverVault(vault).onStrategyDidntHandleDeposit{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(_errcode);
    }

    /**
     * @dev Handles a withdrawal error.
     * This function calls the withdrawFromStrategyError function of the vault with the error code.
     * @param _errcode The error code.
     *
     * **Postconditions**:
     *
     *  - The withdrawFromStrategyError function of the vault is called with the error code.
     */
    function withdrawError(uint32 _errcode) internal view {
        IStEverVault(vault).withdrawFromStrategyError{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(_errcode);
    }


    /// @notice Handle a transfer
    /// @param source The source of the transfer
    /// @param amount The amount of the transfer
    function onTransfer(address source, uint128 amount) override external {}

    /**
     * @dev See {IStrategy-withdrawForce}.
     *
     * **Preconditions**:
     *
     *  - The caller must be the vault.
     *
     * **Postconditions**:
     *
     *  - The state is set to withdrawing from the pooling round.
     *  - The {IDePool-withdrawFromPoolingRound} function is called with the amount.
     */
    function withdrawForce(uint64 _amount) override external onlyVault {
        tvm.rawReserve(_reserve(), 0);

        state = State.WITHDRAWING_FROM_POOLING_ROUND;
        IDePool(dePool).withdrawFromPoolingRound{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: true}(_amount);
    }

    /**
     * @dev Receives a transfer from the dePool or the vault.
     *
     * **Preconditions**:
     *
     *  - The caller must be the dePool or the vault.
     *
     * **Postconditions**:
     *
     *  - The state is set to initial if the sender is the dePool and the state is withdrawing from the pooling round.
     *  - The receiveFromStrategy function of the vault is called.
     */
    receive() external onlyDepoolOrVault {
        tvm.rawReserve(_reserve(),0);

        if (msg.sender == dePool) {

            if (state == State.WITHDRAWING_FROM_POOLING_ROUND) {
                state = State.INITIAL;
            }

            IStEverVault(vault).receiveFromStrategy{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}();
        }
    }


    /// @notice Handle a bounce
    /// @param _slice The slice of the bounce

    onBounce(TvmSlice _slice) external onlyDepool {
        tvm.accept();

        uint32 functionId = _slice.decode(uint32);
        if (functionId == tvm.functionId(IDePool.addOrdinaryStake)) {
            tvm.rawReserve(_reserve(),0);

            state = State.INITIAL;

            return depositNotHandled(1);
        }

        if (
            functionId == tvm.functionId(IDePool.withdrawPart) ||
            functionId == tvm.functionId(IDePool.withdrawFromPoolingRound)
        ) {
            tvm.rawReserve(_reserve(),0);

            state = State.INITIAL;

            return withdrawError(1);
        }
    }

    /**
     * @dev Handles the completion of a round.
     * This function sends a strategy report to the vault and handles a withdrawal
     * if the dePool is making a withdrawal.
     *
     * @param _reward The reward for the round.
     * @param _ordinaryStake The ordinary stake for the round.
     *
     * **Preconditions**:
     *
     *  - The caller must be the dePool.
     *
     * **Postconditions**:
     *
     *  - A strategy report is sent to the vault.
     *  - If the dePool is making a withdrawal, the withdrawal is handled.
     */
    function onRoundComplete(
        uint64,
        uint64 _reward,
        uint64 _ordinaryStake,
        uint64,
        uint64,
        bool,
        uint8
    ) override external onlyDepool {
        tvm.accept();
        uint128 valueForEvaluatingReport = 0.11 ever;
        /*
            making free 0.11 ever for evaluating report also full msg.value if report has attached withdraw value
        */
        tvm.rawReserve(address(this).balance - valueForEvaluatingReport - msg.value, 0);

        uint128 pureBalance = address(this).balance - msg.value;
        uint128 requestedBalance;
        if (pureBalance < THRESHOLD_BALANCE) {
            requestedBalance = MAX_BALANCE - pureBalance;
        }
        uint128 callBackValue = 0.1 ever;
        IStEverVault(vault).strategyReport{
            value: callBackValue,
            bounce: false
            }(
                _reward,
                0,
                _ordinaryStake,
                requestedBalance
            );

        if (isDePoolMakingWithdraw(msg.value)) {
            if (state == State.WITHDRAWING) {
                state = State.INITIAL;

                IStEverVault(vault).receiveFromStrategy{value:0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}();
                return;
            }

            IStEverVault(vault).receiveAdditionalTransferFromStrategy{value:0, flag:MsgFlag.ALL_NOT_RESERVED, bounce: false}();
        }
    }

    /**
     * @dev Checks if the dePool is making a withdrawal.
     *
     * @param _msgValue The message value.
     * @return A boolean indicating if the dePool is making a withdrawal.
     */
    function isDePoolMakingWithdraw(uint128 _msgValue) internal pure returns (bool) {
        uint128 basicMsgValuePart = 0.05 ever;
        return _msgValue > basicMsgValuePart;
    }

    /**
     * @dev See {IStrategy-withdrawExtraMoney}.
     *
     * **Preconditions**:
     *
     *  - The caller must be the vault.
     *
     * **Postconditions**:
     *
     *  - The {IStEverVault-receiveExtraMoneyFromStrategy} function of the vault is called.
     */
    function withdrawExtraMoney() override external onlyVault {
        uint128 pureBalance = address(this).balance - msg.value;

        if (pureBalance > MAX_BALANCE) {
            tvm.rawReserve(MAX_BALANCE, 0);

            IStEverVault(vault).receiveExtraMoneyFromStrategy{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}();
            return;
        }

        tvm.rawReserve(_reserve(), 0);

        IStEverVault(vault).receiveExtraMoneyFromStrategy{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}();
    }


    /**
     * @dev See {IStEverVault-upgrade}.
     *
     * **Preconditions**:
     *
     *  - The caller must be the owner.
     *  - The call value must be greater than or equal to the minimum call value.
     *
     * **Postconditions**:
     *
     *  - If the new version is the same as the current version, the remaining gas
     *    is sent to the specified address and the function returns.
     *  - If the new version is different, the contract's state is updated with
     *    the new version's data and the contract's code is replaced with the new code.
     */
    function upgrade(TvmCell _newCode, uint32 _newVersion, address _sendGasTo) override external onlyFactory {
        if (_newVersion == strategyVersion) {
            tvm.rawReserve(_reserve(), 0);
            _sendGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }

        // should be unpacked in the same order!
        TvmCell data = abi.encode(
            _sendGasTo, // address
            _newVersion, // uint32
            minStake, // uint128
            vault, // address
            dePool, // address
            state, // State
            nonce, // uint128
            factory, // address
            strategyVersion // uint32
        );
        // set code after complete this method
        tvm.setcode(_newCode);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(_newCode);

        onCodeUpgrade(data);
    }

    /**
     * @dev Handles the upgrade of the contract's code.
     */
    function onCodeUpgrade(TvmCell _upgradeData) private {}

}
